var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 *  Time 2017/02/24
 *  Name Spicely
 *  Email Spicely@outlook.com
 */
import type from './type';
var json = {
    // 深度合并
    assign: function (minor, main) {
        if (minor === void 0) { minor = {}; }
        if (main === void 0) { main = {}; }
        for (var key in main) {
            minor[key] = minor[key] && type.object(minor[key])
                ? this.assign(minor[key], main[key])
                : minor[key] = main[key];
        }
        return minor;
    },
    // 深度复制
    clone: function (obj) {
        return this.assign({}, obj);
    },
    // 移除指定数组对象 返回一个浅复制对象
    omit: function (obj, fields) {
        var shallowCopy = __assign({}, obj);
        for (var i = 0; i < fields.length; i++) {
            var key = fields[i];
            delete shallowCopy[key];
        }
        return shallowCopy;
    }
};
export default json;
//# sourceMappingURL=json.js.map