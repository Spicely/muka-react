var WebAudio = /** @class */ (function () {
    function WebAudio(url) {
        var _this = this;
        this.audio = new Audio();
        this.webAudio = new AudioContext();
        this.playIndex = 0;
        this.status = 'loading';
        this.volume = 0.5;
        // protected config: BAudioConfig
        // 事件监听存放
        this.handles = {};
        this.analyser = this.webAudio.createAnalyser();
        this.ended = new Promise(function (resolve, reject) { return resolve(true); });
        this.autoNext = true;
        this.draw = function () {
            // console.log(1)
        };
        this.setCurrentTime = function (time, mode) {
            if (mode === void 0) { mode = 'second'; }
            if (mode === 'percent') {
                var duration = _this.audio.duration;
                var currentTime = duration * time / 100;
                _this.audio.currentTime = currentTime;
                return;
            }
            _this.audio.currentTime = time;
        };
        this.getPlayIndex = function (cb) {
            _this.on('playIndex', function (index) {
                cb(index);
            });
        };
        this.prev = function () {
            _this.pause();
            _this.setPlayIndex(--_this.playIndex);
            _this.play();
        };
        this.play = function () {
            _this.emit('playStatus', 'play');
            _this.emit('playIndex', _this.playIndex);
            _this.audio.play();
        };
        this.getStatus = function (cb) {
            _this.on('playStatus', function (value) {
                cb(value);
            });
        };
        this.getProgress = function (cb) {
            _this.getPlayDuration(function (params, value) {
                var time = params.value;
                _this.getPlayCurrentTime(function (params, value) {
                    cb(params.value / time * 100);
                });
            });
        };
        this.pause = function () {
            _this.emit('playStatus', 'pause');
            _this.audio.pause();
        };
        this.next = function () {
            if (_this.playIndex === _this.urls.length - 1)
                return;
            _this.pause();
            _this.setPlayIndex(++_this.playIndex);
            _this.play();
        };
        this.setVolume = function (value) {
            if (value === void 0) { value = _this.volume; }
            if (value < 0) {
                throw new Error('The value must be greater than 0');
            }
            else if (value > 1) {
                throw new Error('The value must be less than 1');
            }
            _this.volume = value;
            _this.audio.volume = _this.volume;
        };
        // 获得当前播放时间
        this.getPlayCurrentTime = function (cb) {
            _this.audio.addEventListener('timeupdate', function () {
                var objTime = _this.getObjTime('currentTime');
                cb({
                    hour: objTime.hour,
                    minute: objTime.minute,
                    second: objTime.second,
                    value: objTime.value
                }, objTime.time);
            });
        };
        // 获得播放总时长
        this.getPlayDuration = function (cb) {
            // 监听播放状态
            _this.audio.addEventListener('canplay', function () {
                var objTime = _this.getObjTime('duration');
                cb({
                    hour: objTime.hour,
                    minute: objTime.minute,
                    second: objTime.second,
                    value: objTime.value
                }, objTime.time);
            });
        };
        // 获得缓冲进度
        this.getBuffer = function (cb) {
            var THIS = _this;
            _this.audio.addEventListener('progress', function () {
                try {
                    var buffer = THIS.audio.buffered;
                    var timeRanges = buffer;
                    var timeBuffered = timeRanges.end(buffer.length - 1);
                    var bufferPercent = timeBuffered / _this.audio.duration;
                    cb(bufferPercent * 100);
                }
                catch (e) {
                    cb(100);
                }
            });
        };
        // 设置播放文件
        this.setPlayIndex = function (num) {
            if (num >= _this.urls.length) {
                _this.playIndex = _this.urls.length - 1;
            }
            else if (num <= 0) {
                _this.playIndex = 0;
            }
            else {
                _this.playIndex = num;
            }
            _this.emit('playIndex', _this.playIndex);
            _this.audio.src = _this.urls[_this.playIndex];
        };
        // 获得对象时间
        this.getObjTime = function (obj) {
            var time = _this.audio[obj];
            var second = Math.floor(time % 60);
            var minute = Math.floor(time / 60);
            var hour = Math.floor(second / 60);
            if (hour > 0) {
                second = Math.floor(second % 60);
            }
            var hourStr = hour > 0 ? hour < 10 ? '0' + hour : hour.toString() : '';
            var timeStr = hourStr ? hourStr + ':' : hourStr +
                (minute > 0 ? minute < 10 ? '0' + minute : minute.toString() : '00') + ':' +
                (second > 0 ? second < 10 ? '0' + second : second.toString() : '00');
            return {
                hour: hour,
                minute: minute,
                second: second,
                time: timeStr,
                value: time
            };
        };
        // 状态事件监听
        this.on = function (em, cb) {
            if (!_this.handles[em]) {
                _this.handles[em] = [];
            }
            _this.handles[em].push(cb);
        };
        // 事件触发
        this.emit = function (em, value) {
            if (_this.handles[em]) {
                _this.handles[em].map(function (cb) {
                    cb(value);
                });
            }
        };
        // 初始化
        this.urls = url;
        this.audio.volume = this.volume;
        this.setPlayIndex(this.playIndex);
        this.creatConnet();
        // 监听播放完成
        this.audio.addEventListener('ended', function () {
            _this.emit('playStatus', 'success');
            if (_this.autoNext) {
                _this.ended.then(function () {
                    _this.next();
                });
            }
        });
    }
    WebAudio.prototype.creatConnet = function () {
        this.audio.crossOrigin = 'anonymous';
        this.source = this.webAudio.createMediaElementSource(this.audio);
        this.source.connect(this.analyser);
        this.analyser.connect(this.webAudio.destination);
    };
    return WebAudio;
}());
export default WebAudio;
//# sourceMappingURL=WebAudio.js.map