export default class WebAudio {
    protected audio: HTMLAudioElement;
    protected webAudio: AudioContext;
    protected urls: string[];
    protected playIndex: number;
    protected status: 'loading' | 'success' | 'play' | 'pause';
    protected source: MediaElementAudioSourceNode;
    protected volume: number;
    protected handles: {};
    readonly analyser: AnalyserNode;
    ended: Promise<boolean>;
    private autoNext;
    constructor(url: string[]);
    draw: () => void;
    readonly setCurrentTime: (time: number, mode?: "second" | "percent") => void;
    readonly getPlayIndex: (cb: (index: number) => void) => void;
    readonly prev: () => void;
    readonly play: () => void;
    readonly getStatus: (cb: (val: string) => void) => void;
    readonly getProgress: (cb: (val: number) => void) => void;
    readonly pause: () => void;
    readonly next: () => void;
    protected creatConnet(): void;
    readonly setVolume: (value?: number) => void;
    readonly getPlayCurrentTime: (cb: (params: object, time: string) => void) => void;
    readonly getPlayDuration: (cb: (params: object, time: string) => void) => void;
    readonly getBuffer: (cb: (val: number) => void) => void;
    readonly setPlayIndex: (num: number) => void;
    readonly getObjTime: (obj: string) => {
        hour: number;
        minute: number;
        second: number;
        time: string;
        value: number;
    };
    protected on: (em: string, cb: (value: string | number | boolean | object) => void) => void;
    protected emit: (em: string, value?: string | number | boolean | object | undefined) => void;
}
